import ImageLoader from "../imageloader/ImageLoader.js";
import Vector3 from "../maths_CG/Vector3.js";
import Matrix4 from "../maths_CG/Matrix4.js";
import Vector4 from "../maths_CG/Vector4.js";

export default class Cuarto {
    /**
     * @param {WebGLRenderingContext} gl
     * @param {Matrix4} initial_transform
     */
    constructor(gl, initial_transform) {

        let matrixAux = new Vector3(0, 0, 0);

        this.initial_transform = initial_transform || matrixAux;

        let vertices = this.getVertices();

        let faces = this.getFaces();

        for (let i = 0; i < faces.length; i++) {
            faces[i]--;
        }

        let flat_vertices = [];
        for (let i = 0; i < faces.length; i++) {
            flat_vertices.push(
                vertices[faces[i] * 3],
                vertices[faces[i] * 3 + 1],
                vertices[faces[i] * 3 + 2]
            );
        }

        this.positionBuffer = gl.createBuffer();
        this.vertices = flat_vertices;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);

        this.texture = gl.createTexture();
        gl.activeTexture(gl.TEXTURE4);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, ImageLoader.getImage("./texturas/Cuarto.png"));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        this.uv = this.getUV(this.vertices);
        this.UVBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.UVBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.uv), gl.STATIC_DRAW);

        let normals = this.getNormals(this.vertices);
        this.normalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);

        this.num_elements = this.vertices.length / 3;
    }

    /**
     * @param {WebGLRenderingContext} gl
     * @param {WebGLUniformLocation} shader_locations
     * @param {Vector4} lightPos
     * @param {Matrix4} viewMatrix
     * @param {Matrix4} projectionMatrix
     */
    draw(gl, shader_locations, lightPos, viewMatrix, projectionMatrix) {

        //gl.bindTexture(gl.TEXTURE_2D, this.texture);

        gl.uniform1i(shader_locations.u_texture, 4);

        gl.enableVertexAttribArray(shader_locations.positionAttribute);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
        gl.vertexAttribPointer(shader_locations.positionAttribute, 3, gl.FLOAT, false, 0, 0);

        gl.enableVertexAttribArray(shader_locations.texcoordAttribute);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.UVBuffer);
        gl.vertexAttribPointer(shader_locations.texcoordAttribute, 2, gl.FLOAT, false, 0, 0);

        gl.enableVertexAttribArray(shader_locations.normalAttribute);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer);
        gl.vertexAttribPointer(shader_locations.normalAttribute, 3, gl.FLOAT, false, 0, 0);

        let viewModelMatrix = Matrix4.multiply(viewMatrix, this.initial_transform);
        gl.uniformMatrix4fv(shader_locations.VM_matrix, false, viewModelMatrix.toArray());

        let lightPosView = viewMatrix.multiplyVector(new Vector4(lightPos[0], lightPos[1], lightPos[2], lightPos[3]));
        gl.uniform3f(shader_locations.lightPosition, lightPosView.x, lightPosView.y, lightPosView.z);

        /* for (let i = 0; i < lightPos.length; i++) {
            gl.uniform3fv(shader_locations.lightPosition[i], [lightPos[i][0], lightPos[i][1], lightPos[i][2]]);
        } */

        let projectionViewModelMatrix = Matrix4.multiply(projectionMatrix, viewModelMatrix);
        gl.uniformMatrix4fv(shader_locations.PVM_matrix, false, projectionViewModelMatrix.toArray());

        gl.drawArrays(gl.TRIANGLES, 0, this.num_elements);
    }



    getVertices() {
        return [ //
            -10.243406, -5.008202, 9.968851, //
            -10.243406, 4.991798, 9.968851, //
            -10.243406, -5.008202, -9.981149, //
            -10.243406, 4.991798, -9.981149, //
            9.756595, -5.008202, 9.968851, //
            9.756595, 4.991798, 9.968851, //
            9.756595, -5.008202, -9.981149, //
            9.756595, 4.991798, -9.981149, //
            -10.243406, -4.908202, -9.781649, //
            -10.243406, -4.908202, 9.769352, //
            -10.243406, 4.891798, 9.769352, //
            -10.243406, 4.891798, -9.781649, //
            9.756595, -4.908202, -9.781649, //
            9.756595, 4.891798, -9.781649, //
            9.756595, -4.908202, 9.769352, //
            9.756595, 4.891798, 9.769352, //
            -10.243406, 4.991798, 8.741463, //
            -10.243406, 4.991798, 5.081339, //
            -10.243406, 4.991798, -2.044991, //
            -10.243406, 4.991798, -5.705112, //
            -8.542942, 4.991798, -7.183704, //
            -7.209790, 4.991798, -4.105325, //
            -7.549136, 4.991798, -2.917602, //
            -9.391317, 4.991798, -4.129563, //
            -9.536752, 4.991798, -2.432818, //
            -8.130878, 4.991798, 0.669803, //
            -8.955007, 4.991798, 2.415026, //
            -9.585230, 4.991798, 1.396978, //
            -9.948818, 4.991798, 2.293830, //
            -9.027725, 4.991798, 3.045245, //
            -9.076206, 4.991798, 3.820901, //
            -9.318599, 4.991798, 6.535695, //
            -8.227829, 4.991798, 5.251014, //
            -8.421749, 4.991798, 4.499598, //
            -7.355218, 4.991798, 6.050909, //
            -8.688377, 4.991798, 6.850803, //
            -8.858050, 4.991798, 7.941568, //
            -9.754904, 4.991798, 7.190154, //
            -9.779140, 4.991798, 9.202008, //
            -10.243406, 4.891798, 8.745798, //
            -10.243406, 4.891798, 5.076249, //
            -10.243406, 4.891798, -2.077689, //
            -10.243406, 4.891798, -5.730402, //
            -9.757325, 4.891798, 9.233950, //
            -9.774155, 4.891798, 7.247681, //
            -8.848351, 4.891798, 7.954659, //
            -8.680023, 4.891798, 6.860525, //
            -7.350230, 4.891798, 6.052550, //
            -8.377029, 4.891798, 4.571263, //
            -8.242368, 4.891798, 5.261409, //
            -9.269168, 4.891798, 6.490204, //
            -9.084007, 4.891798, 3.847455, //
            -9.016680, 4.891798, 3.005814, //
            -9.891981, 4.891798, 2.315670, //
            -9.572160, 4.891798, 1.474031, //
            -8.949348, 4.891798, 2.416668, //
            -8.124539, 4.891798, 0.699723, //
            -9.538490, 4.891798, -2.431175, //
            -9.403829, 4.891798, -4.047122, //
            -7.552223, 4.891798, -2.936159, //
            -7.181901, 4.891798, -4.080788, //
            -8.528532, 4.891798, -7.178023, //
            -10.198240, 4.891798, 9.769352, //
            -10.243406, -4.908202, -7.939295, //
            -10.243406, -4.908202, -6.335732, //
            -10.243406, -4.908202, 3.351361, //
            -9.127854, -4.908202, -8.898804, //
            -8.628382, -4.908202, -8.123309, //
            -7.471718, -4.908202, -6.953499, //
            -9.022702, -4.908202, -6.519749, //
            -8.470654, -4.908202, -7.216378, //
            -7.800316, -4.908202, -5.323649, //
            -8.615240, -4.908202, -4.942475, //
            -9.666761, -4.908202, -3.549216, //
            -9.193580, -4.908202, -3.076034, //
            -9.193580, -4.908202, -1.656488, //
            -9.509033, -4.908202, -2.445123, //
            -10.100513, -4.908202, -1.511903, //
            -9.298729, -4.908202, -0.736410, //
            -9.088425, -4.908202, 1.024879, //
            -9.745624, -4.908202, 0.354538, //
            -9.837631, -4.908202, 1.208895, //
            -8.878120, -4.908202, 2.194691, //
            -9.154142, -4.908202, 3.035903, //
            -9.285587, -4.908202, 2.404994, //
            -9.850776, -4.908202, 1.931812, //
            -8.825544, -4.908202, 3.969125, //
            -8.194632, -4.908202, 6.111589, //
            -9.863913, -4.908202, 7.163106, //
            -8.496937, -4.908202, 7.333975, //
            -8.602091, -4.908202, 8.530075, //
            -9.430158, -4.908202, 8.530075, //
            -9.430157, -4.908202, 9.042690, //
            -7.997467, -4.908202, 9.160987, //
            -10.243406, -5.008202, -7.900710, //
            -10.243406, -5.008202, -6.318565, //
            -10.243406, -5.008202, 3.356848, //
            -10.243406, -5.008202, 9.769269, //
            -7.996172, -5.008202, 9.183391, //
            -9.418577, -5.008202, 9.046474, //
            -9.433788, -5.008202, 8.536842, //
            -8.612293, -5.008202, 8.552055, //
            -8.528618, -5.008202, 7.380660, //
            -9.829323, -5.008202, 7.160073, //
            -8.193935, -5.008202, 6.095169, //
            -8.810061, -5.008202, 3.965362, //
            -9.844536, -5.008202, 1.942044, //
            -9.258840, -5.008202, 2.451677, //
            -9.144747, -5.008202, 3.006948, //
            -8.863305, -5.008202, 2.200664, //
            -9.821717, -5.008202, 1.227038, //
            -9.738047, -5.008202, 0.375115, //
            -9.091496, -5.008202, 1.014056, //
            -9.296869, -5.008202, -0.773461, //
            -10.080339, -5.008202, -1.496074, //
            -9.525064, -5.008202, -2.424061, //
            -9.190382, -5.008202, -1.640596, //
            -9.182776, -5.008202, -3.078218, //
            -9.669592, -5.008202, -3.542211, //
            -8.665537, -5.008202, -4.903767, //
            -7.813611, -5.008202, -5.314514, //
            -8.490583, -5.008202, -7.200914, //
            -8.977398, -5.008202, -6.501119, //
            -7.463712, -5.008202, -6.942296, //
            -8.619894, -5.008202, -8.113691, //
            -9.099104, -5.008202, -8.851517, //
        ]
    }

    getFaces() {
        return [
            27, 26, 34, //
            114, 113, 117, //
            16, 10, 15, //
            12, 13, 9, //
            79, 78, 76, //
            5, 13, 7, //
            2, 5, 1, //
            8, 3, 7, //
            6, 15, 5, //
            7, 14, 8, //
            8, 16, 6, //
            3, 12, 9, //
            2, 10, 11, //
            56, 53, 49, //
            98, 94, 10, //
            12, 21, 62, //
            21, 43, 62, //
            20, 61, 43, //
            22, 60, 61, //
            23, 59, 60, //
            24, 58, 59, //
            25, 42, 58, //
            19, 57, 42, //
            26, 56, 57, //
            27, 55, 56, //
            28, 54, 55, //
            29, 53, 54, //
            30, 52, 53, //
            31, 41, 52, //
            51, 18, 32, //
            51, 33, 50, //
            34, 48, 49, //
            35, 47, 48, //
            36, 46, 47, //
            37, 45, 46, //
            38, 40, 45, //
            17, 44, 40, //
            11, 39, 2, //
            10, 63, 11, //
            3, 67, 126, //
            67, 95, 126, //
            64, 125, 95, //
            68, 124, 125, //
            69, 123, 124, //
            70, 122, 123, //
            71, 96, 122, //
            121, 65, 72, //
            121, 73, 120, //
            73, 119, 120, //
            74, 118, 119, //
            76, 116, 117, //
            75, 117, 118, //
            77, 115, 116, //
            78, 114, 115, //
            79, 113, 114, //
            80, 112, 113, //
            81, 111, 112, //
            82, 110, 111, //
            83, 109, 110, //
            84, 108, 109, //
            85, 107, 108, //
            86, 97, 107, //
            66, 106, 97, //
            87, 105, 106, //
            88, 104, 105, //
            89, 103, 104, //
            90, 102, 103, //
            91, 101, 102, //
            92, 100, 101, //
            93, 99, 100, //
            1, 98, 10, //
            8, 6, 22, //
            6, 2, 37, //
            37, 2, 39, //
            39, 17, 38, //
            35, 6, 37, //
            21, 4, 8, //
            22, 20, 21, //
            25, 24, 23, //
            22, 21, 8, //
            19, 25, 26, //
            25, 23, 26, //
            23, 22, 35, //
            35, 22, 6, //
            39, 38, 37, //
            37, 36, 35, //
            34, 33, 32, //
            34, 32, 31, //
            32, 18, 31, //
            35, 34, 26, //
            23, 35, 26, //
            34, 31, 30, //
            30, 29, 27, //
            29, 28, 27, //
            30, 27, 34, //
            98, 1, 99, //
            1, 5, 99, //
            7, 3, 126, //
            126, 95, 125, //
            126, 125, 124, //
            5, 7, 124, //
            7, 126, 124, //
            101, 100, 102, //
            100, 99, 102, //
            123, 122, 96, //
            5, 124, 121, //
            124, 123, 121, //
            102, 99, 103, //
            99, 5, 105, //
            103, 99, 105, //
            105, 104, 103, //
            123, 96, 121, //
            121, 120, 118, //
            120, 119, 118, //
            107, 97, 108, //
            97, 106, 109, //
            106, 105, 110, //
            105, 5, 121, //
            110, 105, 121, //
            121, 118, 117, //
            117, 116, 115, //
            121, 117, 113, //
            110, 121, 113, //
            109, 108, 97, //
            112, 111, 113, //
            111, 110, 113, //
            110, 109, 106, //
            117, 115, 114, //
            16, 63, 10, //
            12, 14, 13, //
            15, 10, 94, //
            94, 93, 91, //
            93, 92, 91, //
            13, 15, 69, //
            15, 94, 88, //
            67, 9, 13, //
            68, 64, 67, //
            69, 68, 67, //
            15, 88, 72, //
            94, 91, 90, //
            90, 89, 88, //
            94, 90, 88, //
            69, 67, 13, //
            65, 71, 70, //
            70, 69, 72, //
            72, 69, 15, //
            87, 66, 84, //
            66, 86, 85, //
            84, 66, 85, //
            88, 87, 83, //
            72, 88, 83, //
            72, 65, 70, //
            83, 82, 80, //
            82, 81, 80, //
            87, 84, 83, //
            74, 73, 75, //
            73, 72, 75, //
            83, 80, 72, //
            80, 79, 76, //
            72, 80, 76, //
            76, 75, 72, //
            78, 77, 76, //
            5, 15, 13, //
            2, 6, 5, //
            8, 4, 3, //
            6, 16, 15, //
            7, 13, 14, //
            8, 14, 16, //
            3, 4, 12, //
            2, 1, 10, //
            45, 40, 44, //
            44, 11, 63, //
            63, 16, 44, //
            16, 14, 61, //
            44, 16, 46, //
            14, 12, 62, //
            62, 43, 61, //
            60, 59, 58, //
            14, 62, 61, //
            60, 58, 57, //
            58, 42, 57, //
            61, 60, 48, //
            48, 16, 61, //
            46, 45, 44, //
            48, 47, 46, //
            51, 50, 49, //
            48, 46, 16, //
            41, 51, 52, //
            51, 49, 52, //
            49, 48, 57, //
            48, 60, 57, //
            53, 52, 49, //
            55, 54, 56, //
            54, 53, 56, //
            57, 56, 49, //
            98, 99, 94, //
            12, 4, 21, //
            21, 20, 43, //
            20, 22, 61, //
            22, 23, 60, //
            23, 24, 59, //
            24, 25, 58, //
            25, 19, 42, //
            19, 26, 57, //
            26, 27, 56, //
            27, 28, 55, //
            28, 29, 54, //
            29, 30, 53, //
            30, 31, 52, //
            31, 18, 41, //
            51, 41, 18, //
            51, 32, 33, //
            34, 35, 48, //
            35, 36, 47, //
            36, 37, 46, //
            37, 38, 45, //
            38, 17, 40, //
            17, 39, 44, //
            11, 44, 39, //
            3, 9, 67, //
            67, 64, 95, //
            64, 68, 125, //
            68, 69, 124, //
            69, 70, 123, //
            70, 71, 122, //
            71, 65, 96, //
            121, 96, 65, //
            121, 72, 73, //
            73, 74, 119, //
            74, 75, 118, //
            76, 77, 116, //
            75, 76, 117, //
            77, 78, 115, //
            78, 79, 114, //
            79, 80, 113, //
            80, 81, 112, //
            81, 82, 111, //
            82, 83, 110, //
            83, 84, 109, //
            84, 85, 108, //
            85, 86, 107, //
            86, 66, 97, //
            66, 87, 106, //
            87, 88, 105, //
            88, 89, 104, //
            89, 90, 103, //
            90, 91, 102, //
            91, 92, 101, //
            92, 93, 100, //
            93, 94, 99, //
        ];
    }

    getNormals(vertices) {

        let normals = [];

        let v1, v2, v3, n;

        for (let i = 0; i < vertices.length; i += 9) {

            v1 = new Vector3(vertices[i], vertices[i + 1], vertices[i + 2]);
            v2 = new Vector3(vertices[i + 3], vertices[i + 4], vertices[i + 5]);
            v3 = new Vector3(vertices[i + 6], vertices[i + 7], vertices[i + 8]);

            n = Vector3.cross(
                Vector3.subtract(v2, v1),
                Vector3.subtract(v2, v3)
            ).normalize();

            normals.push(
                n.x, n.y, n.z,
                n.x, n.y, n.z,
                n.x, n.y, n.z
            );
        }

        return normals;
    }

    getUV(vertices) {
        // se calculan las coordenadas UV sobre la esfera
        let uv = [];
        let PI2 = 2 * Math.PI
        let d1, d2, d3;
        let u1, v1, u2, v2, u3, v3;

        for (let i = 0; i < vertices.length / 3; i += 3) {
            d1 = new Vector3(
                vertices[i * 3],
                vertices[i * 3 + 1],
                vertices[i * 3 + 2]
            );

            d1 = d1.normalize();

            u1 = 0.5 + (Math.atan2(d1.x, d1.z)) / PI2;
            v1 = 0.5 - (Math.asin(d1.y)) / Math.PI;

            d2 = new Vector3(
                vertices[(i + 1) * 3],
                vertices[(i + 1) * 3 + 1],
                vertices[(i + 1) * 3 + 2]
            );

            d2 = d2.normalize();

            u2 = 0.5 + (Math.atan2(d2.x, d2.z)) / PI2;
            v2 = 0.5 - (Math.asin(d2.y)) / Math.PI;

            d3 = new Vector3(
                vertices[(i + 2) * 3],
                vertices[(i + 2) * 3 + 1],
                vertices[(i + 2) * 3 + 2]
            );

            d3 = d3.normalize();

            u3 = 0.5 + (Math.atan2(d3.x, d3.z)) / PI2;
            v3 = 0.5 - (Math.asin(d3.y)) / Math.PI;

            if (Math.abs(u1 - u2) > 0.5) {
                if (u1 > u2) {
                    u2 = 1 + u2;
                } else {
                    u1 = 1 + u1;
                }
            }
            if (Math.abs(u1 - u3) > 0.5) {
                if (u1 > u3) {
                    u3 = 1 + u3;
                } else {
                    u1 = 1 + u1;
                }
            }
            if (Math.abs(u2 - u3) > 0.5) {
                if (u2 > u3) {
                    u3 = 1 + u3;
                } else {
                    u2 = 1 + u2;
                }
            }

            uv.push(u1, v1, u2, v2, u3, v3);
        }

        return uv;
    }
}